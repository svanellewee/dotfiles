#!/usr/bin/env bash
if [[ -z $TMPDIR ]]; then
	TMPDIR=/tmp
fi
CTERM="\e[0m"
GREEN="\e[32m"
RED="\e[31m"
BLUE="\e[34m"
CYAN="\e[36m"
WHITE="\e[37m"

WEATHER_DB=${TMPDIR}/weather.db
if [ ! -f ${WEATHER_DB} ]; then 
 APPID=f3df12a58ab48f203c562e79c17f579a
 echo "datetime,temp,humidity" > ${TMPDIR}/weather.csv
 curl -s "api.openweathermap.org/data/2.5/forecast?q=Cape%20Town&units=metric&APPID=${APPID}" |jq '.list[] | "\(.dt_txt),\(.main.temp),\(.main.humidity)"' -r >> ${TMPDIR}/weather.csv

sqlite3 ${WEATHER_DB} <<EOF
DROP TABLE IF EXISTS weather;
.mode csv
.import ${TMPDIR}/weather.csv weather
EOF

sqlite3 ${WEATHER_DB} <<EOF 
CREATE VIEW IF NOT EXISTS daily_summaries AS
SELECT DATE(datetime) AS full_date, 
       MIN(temp) AS min_temp, 
       MAX(temp) AS max_temp, 
       MIN(humidity) AS min_humid,
       MAX(humidity) AS max_humid  
FROM weather 
GROUP BY DATE(datetime);
EOF
fi

function temp-colour() {
  temp=$1
  WARM=$(bc <<<"${temp} > 15.0")
  if [[ "${WARM}" == 1 ]]; then
     echo -e "${RED}"
  else
     echo -e "${CYAN}"
  fi
}

sqlite3 ${WEATHER_DB}<<EOF | { IFS='|'; while read -a DATA; do printf "${WHITE}Today's temp should be $(temp-colour ${DATA[1]})%.2f${CTERM}-$(temp-colour ${DATA[2]})%.2f${CTERM}\n"  ${DATA[1]} ${DATA[2]}; done }
SELECT * FROM daily_summaries
WHERE date(full_date)=date('now');
EOF

sqlite3 ${WEATHER_DB}<<EOF | { IFS='|'; while read -a DATA; do printf "${WHITE}Tomorrow's temp should be $(temp-colour ${DATA[1]})%.2f${CTERM}-$(temp-colour ${DATA[2]})%.2f${CTERM}\n"  ${DATA[1]} ${DATA[2]}; done }
SELECT * FROM daily_summaries
WHERE date(full_date)=date('now', '1 days');
EOF
