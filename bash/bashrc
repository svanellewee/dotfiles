#!/usr/bin/env bash

source $HOME/dotfiles/bash/history-management
export EDITOR=nvim
alias l='ls -CF'
alias la='ls -A'
alias ll='ls -hlart'
alias ls='ls --color=auto'
alias x='exit'

alias gommit='git commit -m'
alias gadd='git add'
alias gstatus='git status'
alias gtree='git log --oneline --decorate --graph'

function colour-descend() {
        local string="${1}"
        local starting_colour="${2:-112}"                                                                                                                                                                          
        for ((i=0; i < "${#string}"; i++))                                                                                                                                                                         
        do                                                                                                                                                                                                         
                x=$(( ${starting_colour} + ${i} ))                                                                                                                                                                 
                echo  -en "\e[38;5;${x}m${string:$i:1}\e[0m"                                                                                                                                                       
        done                                                                                                                                                                                                       
}

function gfin {
  git pull --rebase
  git rebase -i
  git push origin HEAD:master
}

function gbranch {
	git checkout -b "${1}" origin/master
}

function fork-repo() {
	local e="${1##*/}"
	local repodir="${e%%.git}"
	git clone "${1}"
	cd "${repo_dir}"
	git config user.name svanellewee
	git config user.email stephan.van.ellewee@gmail.com
	git remote add upstream "${2}"
}

#bind 'set show-all-if-ambiguous on'
#bind 'TAB:menu-complete'

# Golang
#export GOROOT=/home/stephan/applications/go
#export PATH=$PATH:$GOROOT/bin
export GOPATH=/home/stephan/source/gopath
export PATH=$PATH:$GOPATH/bin
TMUX_PATH="/home/stephan/applications/tmux/bin/" 
if [[ -d "${TMUX_PATH}" ]]; then
	PATH=$PATH:${TMUX_PATH}
fi


CTERM="\e[0m"
GREEN="\e[32m"
RED="\e[31m"
BLUE="\e[34m"
CYAN="\e[36m"
MAGENTA="\e[35m"

function _c() {
   echo -e "$1"
}

function _clr() {
   echo -e "${CTERM}"
}

function _sve_git_changes() {
   local CHANGES
   CHANGES="$(git diff-index HEAD | wc -l)"
   if [[ "${CHANGES}" != "0" ]] ; then 
	   echo ": ${CHANGES} changes"
   else
	   echo ""
   fi
}

function _sve_git_branch() {
	local BRANCH_NAME
	BRANCH_NAME="$(git rev-parse --abbrev-ref HEAD 2>/dev/null)"
	if [[ -n "${BRANCH_NAME}" ]]; then
		echo "[$(_c "${RED}")${BRANCH_NAME}$(_sve_git_changes)$(_clr)]"

	else
		echo ""
	fi
}

function _sve_kube_context() {
	local CONTEXT_NAME
	CONTEXT_NAME="$(kubectl config current-context 2>/dev/null)"
	if [[ "$?" -eq 0 ]] && [[ -n "${CONTEXT_NAME}" ]]; then
		col=$(( $RANDOM % 255 ))
		echo "[$(colour-descend ${CONTEXT_NAME} ${col})]"
	else
		echo ""
	fi
}

# Remember to use \[ for non printing chars! 
#  https://unix.stackexchange.com/questions/28827/why-is-my-bash-prompt-getting-bugged-when-i-browse-the-history?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa
PS1='\[$(_c "${GREEN}")\][\A]\[$(_clr)\]$(_sve_git_branch)$(_sve_kube_context)\n\[$(_c "${CYAN}")\]\u\[$(_clr)\]:\w \$ '

# Taken from https://www.digitalocean.com/community/tutorials/how-to-use-bash-history-commands-and-expansions-on-a-linux-vps
HISTSIZE=5000
HISTFILESIZE=10000
#HISTTIMEFORMAT="%F %T "
history-init
function history-store() {
	# Borrowed and adapted from https://spin.atomicobject.com/2016/05/28/log-bash-history/
	[[ -d "${HOME}/.bash_logs" ]] && mkdir -p ${HOME}/.bash_logs
	local OUTPUT_FILE="${HOME}/.bash_logs/bash-history-$(date "+%Y-%m-%d").log"
	# history -a "${OUTPUT_FILE}"  # append history (list) from session to file
	# history -c                   # clear history list
	# history -r "${OUTPUT_FILE}"  # read history file and append to history list
	if [[ "$(id -u)" -ne 0 ]]
	then 
		echo "$(history 1)" >> "${OUTPUT_FILE}"
		history-add "$(history 1)"
	fi
	#history -s "$(history 1)"

}

export PROMPT_COMMAND="history-store;$PROMPT_COMMAND"
function l33t() {
	echo "${1}" | tr -t 'aeio' '4310'
}

function newbash() {
	local input_filename="${1}"
	echo '#!/usr/bin/env bash' > "${input_filename}"
	chmod a+x "${input_filename}"
}

function new-c() {
	local input_filename="${1}"
	cat <<- "EOF" > "${input_filename}".c
	#include <stdio.h>
	int main(int argc, char* argv[]) {
	    printf("Hello world\n");
	    return 0;
	}
	EOF
}

function new-go() {
	local project_name="${1}"
	local url="${2:-"${project_name}"}"
	mkdir -p ./"${project_name}"
	cd "${project_name}"
	go mod init "${url}"
	cat <<- "EOF" > ./main.go
	package main
	import "fmt"
	func main() {
		fmt.Println("Hiya")
	}
	EOF
	go fmt main.go
}
function get-ip-for() {
	local iface="${1:-wlp2s0}"
        ip addr show dev "${iface}" | grep -Po "inet \K[0-9\.]+"
}

function encode-file() {
	local input_filename="${1}"
	openssl aes-256-cbc -salt -pbkdf2 -in "${input_filename}" | base64 --wrap 0 # > "${input_filename}".enc
}

function decode-file() {
	local input_filename="${1}"
	base64 -d "${input_filename}" | openssl aes-256-cbc -salt -pbkdf2 -in - -d # -out "${input_filename}".out
}

PATH=${PATH}:/var/lib/snapd/snap/bin
PATH=${PATH}:/home/stephan/applications/venv3/bin
ANDROID_SDK=/home/stephan/Android/Sdk/
PATH=${PATH}:${ANDROID_SDK}/emulator:${ANDROID_SDK}/tools
